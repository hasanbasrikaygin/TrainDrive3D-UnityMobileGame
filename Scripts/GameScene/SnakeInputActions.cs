//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/SnakeInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SnakeInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SnakeInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SnakeInputActions"",
    ""maps"": [
        {
            ""name"": ""SnakeMain"",
            ""id"": ""0f00fe2b-9431-4836-b418-80c1b70e7c56"",
            ""actions"": [
                {
                    ""name"": ""LeftMove"",
                    ""type"": ""Value"",
                    ""id"": ""c167bf44-881f-494b-af9a-980a1465d565"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightMove"",
                    ""type"": ""Value"",
                    ""id"": ""05cd638f-363f-408e-9811-9831df52c55e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftJump"",
                    ""type"": ""Button"",
                    ""id"": ""f344df04-b25b-40f2-90a8-ebd911c5795f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightJump"",
                    ""type"": ""Button"",
                    ""id"": ""f06afea6-0491-4e9f-aeea-95dd9463ab09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnRight"",
                    ""type"": ""Button"",
                    ""id"": ""6f30cab2-bf33-46e5-ab32-fcf0b662e82f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5d9c4fea-4114-4c5f-8466-91b9e505db1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0691f1d-92c2-42df-af4b-75a47220a05c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""1a7c13d0-a7bd-4e63-8a26-d148c2fa5929"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4b645235-11e0-4d9f-9e84-7e5343ea4ea0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a2047c60-54dc-4fd7-ade9-1b2a43fd8d13"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c0146981-32fe-479a-a37c-57282a638639"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f6e03a18-0be3-4230-b046-2988afd07cb2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""33c7fd42-cfa3-4104-a50b-4752cd5e2e91"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""DirectionArrows"",
                    ""id"": ""100d5002-33ed-4e51-b921-4ae0f7e72e83"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""821abc03-b0b4-43f3-a193-e3b1b7c69ae7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fb53262e-e8e8-493b-beb5-c99b5e6debe4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ddeab68c-7a6c-4e6f-8266-c7918a7759d4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6b6a1138-07f8-42e1-a442-f05312352fd9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""331a3d23-cb3e-4e9f-8469-454e68cf60d9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf0f17b9-c922-4955-91d5-9896a19ece8a"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7220c80e-45f5-44fb-903c-82825a4783cf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5de2652-7094-473a-b997-87ebd07a9b50"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f50e84c-debc-438d-9e3a-aac05b4447ef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49f74345-3b6e-456a-827d-93461bb8338e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SnakeMain
        m_SnakeMain = asset.FindActionMap("SnakeMain", throwIfNotFound: true);
        m_SnakeMain_LeftMove = m_SnakeMain.FindAction("LeftMove", throwIfNotFound: true);
        m_SnakeMain_RightMove = m_SnakeMain.FindAction("RightMove", throwIfNotFound: true);
        m_SnakeMain_LeftJump = m_SnakeMain.FindAction("LeftJump", throwIfNotFound: true);
        m_SnakeMain_RightJump = m_SnakeMain.FindAction("RightJump", throwIfNotFound: true);
        m_SnakeMain_TurnRight = m_SnakeMain.FindAction("TurnRight", throwIfNotFound: true);
        m_SnakeMain_TurnLeft = m_SnakeMain.FindAction("TurnLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SnakeMain
    private readonly InputActionMap m_SnakeMain;
    private List<ISnakeMainActions> m_SnakeMainActionsCallbackInterfaces = new List<ISnakeMainActions>();
    private readonly InputAction m_SnakeMain_LeftMove;
    private readonly InputAction m_SnakeMain_RightMove;
    private readonly InputAction m_SnakeMain_LeftJump;
    private readonly InputAction m_SnakeMain_RightJump;
    private readonly InputAction m_SnakeMain_TurnRight;
    private readonly InputAction m_SnakeMain_TurnLeft;
    public struct SnakeMainActions
    {
        private @SnakeInputActions m_Wrapper;
        public SnakeMainActions(@SnakeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftMove => m_Wrapper.m_SnakeMain_LeftMove;
        public InputAction @RightMove => m_Wrapper.m_SnakeMain_RightMove;
        public InputAction @LeftJump => m_Wrapper.m_SnakeMain_LeftJump;
        public InputAction @RightJump => m_Wrapper.m_SnakeMain_RightJump;
        public InputAction @TurnRight => m_Wrapper.m_SnakeMain_TurnRight;
        public InputAction @TurnLeft => m_Wrapper.m_SnakeMain_TurnLeft;
        public InputActionMap Get() { return m_Wrapper.m_SnakeMain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SnakeMainActions set) { return set.Get(); }
        public void AddCallbacks(ISnakeMainActions instance)
        {
            if (instance == null || m_Wrapper.m_SnakeMainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SnakeMainActionsCallbackInterfaces.Add(instance);
            @LeftMove.started += instance.OnLeftMove;
            @LeftMove.performed += instance.OnLeftMove;
            @LeftMove.canceled += instance.OnLeftMove;
            @RightMove.started += instance.OnRightMove;
            @RightMove.performed += instance.OnRightMove;
            @RightMove.canceled += instance.OnRightMove;
            @LeftJump.started += instance.OnLeftJump;
            @LeftJump.performed += instance.OnLeftJump;
            @LeftJump.canceled += instance.OnLeftJump;
            @RightJump.started += instance.OnRightJump;
            @RightJump.performed += instance.OnRightJump;
            @RightJump.canceled += instance.OnRightJump;
            @TurnRight.started += instance.OnTurnRight;
            @TurnRight.performed += instance.OnTurnRight;
            @TurnRight.canceled += instance.OnTurnRight;
            @TurnLeft.started += instance.OnTurnLeft;
            @TurnLeft.performed += instance.OnTurnLeft;
            @TurnLeft.canceled += instance.OnTurnLeft;
        }

        private void UnregisterCallbacks(ISnakeMainActions instance)
        {
            @LeftMove.started -= instance.OnLeftMove;
            @LeftMove.performed -= instance.OnLeftMove;
            @LeftMove.canceled -= instance.OnLeftMove;
            @RightMove.started -= instance.OnRightMove;
            @RightMove.performed -= instance.OnRightMove;
            @RightMove.canceled -= instance.OnRightMove;
            @LeftJump.started -= instance.OnLeftJump;
            @LeftJump.performed -= instance.OnLeftJump;
            @LeftJump.canceled -= instance.OnLeftJump;
            @RightJump.started -= instance.OnRightJump;
            @RightJump.performed -= instance.OnRightJump;
            @RightJump.canceled -= instance.OnRightJump;
            @TurnRight.started -= instance.OnTurnRight;
            @TurnRight.performed -= instance.OnTurnRight;
            @TurnRight.canceled -= instance.OnTurnRight;
            @TurnLeft.started -= instance.OnTurnLeft;
            @TurnLeft.performed -= instance.OnTurnLeft;
            @TurnLeft.canceled -= instance.OnTurnLeft;
        }

        public void RemoveCallbacks(ISnakeMainActions instance)
        {
            if (m_Wrapper.m_SnakeMainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISnakeMainActions instance)
        {
            foreach (var item in m_Wrapper.m_SnakeMainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SnakeMainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SnakeMainActions @SnakeMain => new SnakeMainActions(this);
    public interface ISnakeMainActions
    {
        void OnLeftMove(InputAction.CallbackContext context);
        void OnRightMove(InputAction.CallbackContext context);
        void OnLeftJump(InputAction.CallbackContext context);
        void OnRightJump(InputAction.CallbackContext context);
        void OnTurnRight(InputAction.CallbackContext context);
        void OnTurnLeft(InputAction.CallbackContext context);
    }
}
